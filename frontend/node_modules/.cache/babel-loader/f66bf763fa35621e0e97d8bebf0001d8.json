{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\butch\\\\Documents\\\\musegeeks\\\\frontend\\\\src\\\\components\\\\Nav.js\",\n    _s2 = $RefreshSig$();\n\nimport { React } from \"react\";\nimport { makeStyles, Grid } from \"@material-ui/core\";\nimport NavButton from \"./NavButton\";\nimport { Navitems } from \"./NavItems\";\nimport LoginModal from \"./LoginModal\";\nimport Logout from './Logout';\nimport { UserContext } from \"../App\";\nimport { useContext, useState } from \"react\";\nimport PostModal from \"./PostModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: theme.spacing(6, 6, 6, 0),\n    right: \"70%\",\n    position: \"fixed\"\n  },\n  account: {\n    position: \"fixed\",\n    bottom: \"10%\"\n  }\n}));\n\nfunction Nav(props) {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n\n  function ConditionalButton() {\n    _s();\n\n    const user = useContext(UserContext);\n    if (user[\"username\"] === \"noUser!\") return /*#__PURE__*/_jsxDEV(LoginModal, {\n      open: open,\n      setOpen: setOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 20\n    }, this);else if (user[\"username\"]) return /*#__PURE__*/_jsxDEV(Logout, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 20\n    }, this);\n  }\n\n  _s(ConditionalButton, \"T/slviYl6xUb2nQaiedYLY1KgOo=\");\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    item: true,\n    xs: 3,\n    direction: \"column\",\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      direction: \"column\",\n      className: classes.root,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        item: true,\n        direction: \"column\",\n        spacing: 1,\n        xs: 3,\n        children: [Navitems.map((item, index) => {\n          const active = item.id === props.id ? true : false;\n          return /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(NavButton, {\n              text: item.title,\n              path: item.path,\n              active: active,\n              children: item.icon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 37\n            }, this)\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 33\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(PostModal, {\n            setLoginOpen: setOpen\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        className: classes.account,\n        children: ConditionalButton()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(Nav, \"TsAExMDA6yuxA58uE+YzDgG8Jdg=\", false, function () {\n  return [useStyles];\n});\n\n_c = Nav;\nexport default Nav;\n\nvar _c;\n\n$RefreshReg$(_c, \"Nav\");","map":{"version":3,"sources":["C:/Users/butch/Documents/musegeeks/frontend/src/components/Nav.js"],"names":["React","makeStyles","Grid","NavButton","Navitems","LoginModal","Logout","UserContext","useContext","useState","PostModal","useStyles","theme","root","padding","spacing","right","position","account","bottom","Nav","props","classes","open","setOpen","ConditionalButton","user","map","item","index","active","id","title","path","icon"],"mappings":"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","sourcesContent":["import { React } from \"react\";\r\nimport {makeStyles, Grid,} from \"@material-ui/core\";\r\nimport NavButton from \"./NavButton\";\r\nimport { Navitems } from \"./NavItems\";\r\nimport LoginModal from \"./LoginModal\";\r\nimport Logout from './Logout';\r\nimport { UserContext } from \"../App\";\r\nimport { useContext,useState } from \"react\";\r\nimport PostModal from \"./PostModal\";\r\nconst useStyles = makeStyles((theme)=>({\r\n    root:{\r\n        padding: theme.spacing(6,6,6,0),\r\n        right: \"70%\",\r\n        position: \"fixed\",\r\n    },\r\n    account: {\r\n        position: \"fixed\",\r\n        bottom: \"10%\",\r\n    }\r\n}));\r\n\r\n\r\n\r\nfunction Nav(props){\r\n    const classes = useStyles();\r\n    const[open, setOpen] = useState(false);\r\n\r\n    function ConditionalButton(){\r\n        const user = useContext(UserContext);\r\n        if(user[\"username\"] === \"noUser!\") \r\n            return <LoginModal open = {open} setOpen = {setOpen}/>;\r\n        else if(user[\"username\"])\r\n            return <Logout/>;\r\n    }\r\n\r\n    return(\r\n        <Grid container item xs = {3}  direction = \"column\">\r\n                <Grid container direction = \"column\" className = {classes.root}>\r\n                    <Grid container item  direction = \"column\" spacing = {1} xs = {3}>\r\n                        {Navitems.map((item,index)=>{\r\n                            const active = item.id === props.id ? true : false;\r\n                            return (\r\n                                <Grid item key = {item.id}>\r\n                                    <NavButton text = {item.title} path = {item.path} active = {active}>\r\n                                        {item.icon}\r\n                                    </NavButton>\r\n                                </Grid> \r\n                            );\r\n                        })}\r\n                        <Grid item>\r\n                            <PostModal setLoginOpen = {setOpen}/>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid  item className = {classes.account}> \r\n                        {ConditionalButton()}\r\n                    </Grid>\r\n                </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default Nav;"]},"metadata":{},"sourceType":"module"}