{"ast":null,"code":"import axios from 'axios';\nconst AxiosInstance = axios.create({\n  baseURL: \"http://127.0.0.1:8000\",\n  timeout: 5000,\n  headers: {\n    Authorization: localStorage.getItem('access_token') ? 'Bearer ' + localStorage.getItem('access_token') : null,\n    'Content-Type': 'application/json',\n    accept: 'application/json'\n  }\n});\nAxiosInstance.interceptors.response.use(response => {\n  return response;\n}, async function (error) {\n  const originalRequest = error.config;\n\n  if (typeof error.response == \"undefined\") {\n    alert(\"A server/network error occurred.\");\n    return Promise.reject(error);\n  }\n\n  if (error.response.status === 401 && originalRequest.url === 'http://127.0.0.1:8000/api/token/refresh/') {\n    window.location.href = '/login/';\n    return Promise.reject(error);\n  }\n\n  if (error.response.data.code === 'token_not_valid' && error.response.status === 401 && error.response.statusText === 'Unauthorized') {\n    const refreshToken = localStorage.getItem('refresh_token');\n\n    if (refreshToken != undefined && refreshToken) {\n      const tokenParts = JSON.parse(atob(refreshToken.split('.')[1])); // exp date in token is expressed in seconds, while now() returns milliseconds:\n\n      const now = Math.ceil(Date.now() / 1000);\n      console.log(tokenParts.exp);\n\n      if (tokenParts.exp > now) {\n        return AxiosInstance.post('/api/token/refresh/', {\n          refresh: refreshToken\n        }).then(response => {\n          localStorage.setItem('access_token', response.data.access);\n          localStorage.setItem('refresh_token', response.data.refresh);\n          AxiosInstance.defaults.headers['Authorization'] = 'Bearer ' + response.data.access;\n          originalRequest.headers['Authorization'] = 'Bearer ' + response.data.access;\n          return AxiosInstance(originalRequest);\n        }).catch(err => {\n          console.log(err);\n        });\n      } else {\n        console.log('Refresh token is expired', tokenParts.exp, now);\n        window.location.href = '/login/';\n      }\n    } else {\n      console.log('Refresh token not available.');\n      window.location.href = '/login/';\n    }\n  } // specific error handling done elsewhere\n\n\n  return Promise.reject(error);\n});\nexport default AxiosInstance;","map":{"version":3,"sources":["C:/Users/butch/Documents/musegeeks/frontend/src/Axios.js"],"names":["axios","AxiosInstance","create","baseURL","timeout","headers","Authorization","localStorage","getItem","accept","interceptors","response","use","error","originalRequest","config","alert","Promise","reject","status","url","window","location","href","data","code","statusText","refreshToken","undefined","tokenParts","JSON","parse","atob","split","now","Math","ceil","Date","console","log","exp","post","refresh","then","setItem","access","defaults","catch","err"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAN,CAAa;AAC/BC,EAAAA,OAAO,EAAE,uBADsB;AAE/BC,EAAAA,OAAO,EAAE,IAFsB;AAG/BC,EAAAA,OAAO,EAAE;AACLC,IAAAA,aAAa,EAAEC,YAAY,CAACC,OAAb,CAAqB,cAArB,IACb,YAAYD,YAAY,CAACC,OAAb,CAAqB,cAArB,CADC,GACsC,IAFhD;AAGL,oBAAgB,kBAHX;AAILC,IAAAA,MAAM,EAAE;AAJH;AAHsB,CAAb,CAAtB;AAWAR,aAAa,CAACS,YAAd,CAA2BC,QAA3B,CAAoCC,GAApC,CACKD,QAAD,IAAc;AACV,SAAOA,QAAP;AACH,CAHL,EAKI,gBAAgBE,KAAhB,EAAsB;AAClB,QAAMC,eAAe,GAAGD,KAAK,CAACE,MAA9B;;AAEA,MAAG,OAAOF,KAAK,CAACF,QAAb,IAAyB,WAA5B,EAAwC;AACpCK,IAAAA,KAAK,CAAC,kCAAD,CAAL;AACA,WAAOC,OAAO,CAACC,MAAR,CAAeL,KAAf,CAAP;AACH;;AAED,MAAGA,KAAK,CAACF,QAAN,CAAeQ,MAAf,KAA0B,GAA1B,IAAiCL,eAAe,CAACM,GAAhB,KAAwB,0CAA5D,EAAuG;AACnGC,IAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,SAAvB;AACA,WAAON,OAAO,CAACC,MAAR,CAAeL,KAAf,CAAP;AACH;;AAGD,MACLA,KAAK,CAACF,QAAN,CAAea,IAAf,CAAoBC,IAApB,KAA6B,iBAA7B,IACAZ,KAAK,CAACF,QAAN,CAAeQ,MAAf,KAA0B,GAD1B,IAEAN,KAAK,CAACF,QAAN,CAAee,UAAf,KAA8B,cAHzB,EAIJ;AACD,UAAMC,YAAY,GAAGpB,YAAY,CAACC,OAAb,CAAqB,eAArB,CAArB;;AAEA,QAAImB,YAAY,IAAIC,SAAhB,IAA6BD,YAAjC,EAA+C;AAC9C,YAAME,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACL,YAAY,CAACM,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAAD,CAAf,CAAnB,CAD8C,CAG9C;;AACA,YAAMC,GAAG,GAAGC,IAAI,CAACC,IAAL,CAAUC,IAAI,CAACH,GAAL,KAAa,IAAvB,CAAZ;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAYV,UAAU,CAACW,GAAvB;;AAEA,UAAIX,UAAU,CAACW,GAAX,GAAiBN,GAArB,EAA0B;AACzB,eAAOjC,aAAa,CAClBwC,IADK,CACA,qBADA,EACuB;AAAEC,UAAAA,OAAO,EAAEf;AAAX,SADvB,EAELgB,IAFK,CAEChC,QAAD,IAAc;AACnBJ,UAAAA,YAAY,CAACqC,OAAb,CAAqB,cAArB,EAAqCjC,QAAQ,CAACa,IAAT,CAAcqB,MAAnD;AACAtC,UAAAA,YAAY,CAACqC,OAAb,CAAqB,eAArB,EAAsCjC,QAAQ,CAACa,IAAT,CAAckB,OAApD;AAEAzC,UAAAA,aAAa,CAAC6C,QAAd,CAAuBzC,OAAvB,CAA+B,eAA/B,IACC,YAAYM,QAAQ,CAACa,IAAT,CAAcqB,MAD3B;AAEA/B,UAAAA,eAAe,CAACT,OAAhB,CAAwB,eAAxB,IACC,YAAYM,QAAQ,CAACa,IAAT,CAAcqB,MAD3B;AAGA,iBAAO5C,aAAa,CAACa,eAAD,CAApB;AACA,SAZK,EAaLiC,KAbK,CAaEC,GAAD,IAAS;AACfV,UAAAA,OAAO,CAACC,GAAR,CAAYS,GAAZ;AACA,SAfK,CAAP;AAgBA,OAjBD,MAiBO;AACNV,QAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCV,UAAU,CAACW,GAAnD,EAAwDN,GAAxD;AACAb,QAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,SAAvB;AACA;AACD,KA5BD,MA4BO;AACNe,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACAlB,MAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,SAAvB;AACA;AACD,GArDuB,CAuDxB;;;AACA,SAAON,OAAO,CAACC,MAAR,CAAeL,KAAf,CAAP;AACG,CA9DL;AAmEA,eAAeZ,aAAf","sourcesContent":["import axios from 'axios';\r\n\r\nconst AxiosInstance = axios.create({\r\n    baseURL: \"http://127.0.0.1:8000\",\r\n    timeout: 5000,\r\n    headers: {\r\n        Authorization: localStorage.getItem('access_token') \r\n        ? 'Bearer ' + localStorage.getItem('access_token') : null,\r\n        'Content-Type': 'application/json',\r\n        accept: 'application/json',\r\n    },\r\n})\r\n\r\nAxiosInstance.interceptors.response.use(\r\n    (response) => {\r\n        return response;\r\n    },\r\n\r\n    async function (error){\r\n        const originalRequest = error.config;\r\n\r\n        if(typeof error.response == \"undefined\"){\r\n            alert(\"A server/network error occurred.\");\r\n            return Promise.reject(error);\r\n        }\r\n\r\n        if(error.response.status === 401 && originalRequest.url === 'http://127.0.0.1:8000/api/token/refresh/'){\r\n            window.location.href = '/login/';\r\n            return Promise.reject(error);\r\n        }\r\n\r\n\r\n        if (\r\n\t\t\terror.response.data.code === 'token_not_valid' &&\r\n\t\t\terror.response.status === 401 &&\r\n\t\t\terror.response.statusText === 'Unauthorized'\r\n\t\t) {\r\n\t\t\tconst refreshToken = localStorage.getItem('refresh_token');\r\n\t\r\n\t\t\tif (refreshToken != undefined && refreshToken) {\r\n\t\t\t\tconst tokenParts = JSON.parse(atob(refreshToken.split('.')[1]));\r\n\r\n\t\t\t\t// exp date in token is expressed in seconds, while now() returns milliseconds:\r\n\t\t\t\tconst now = Math.ceil(Date.now() / 1000);\r\n\t\t\t\tconsole.log(tokenParts.exp);\r\n\r\n\t\t\t\tif (tokenParts.exp > now) {\r\n\t\t\t\t\treturn AxiosInstance\r\n\t\t\t\t\t\t.post('/api/token/refresh/', { refresh: refreshToken })\r\n\t\t\t\t\t\t.then((response) => {\r\n\t\t\t\t\t\t\tlocalStorage.setItem('access_token', response.data.access);\r\n\t\t\t\t\t\t\tlocalStorage.setItem('refresh_token', response.data.refresh);\r\n\r\n\t\t\t\t\t\t\tAxiosInstance.defaults.headers['Authorization'] =\r\n\t\t\t\t\t\t\t\t'Bearer ' + response.data.access;\r\n\t\t\t\t\t\t\toriginalRequest.headers['Authorization'] =\r\n\t\t\t\t\t\t\t\t'Bearer ' + response.data.access;\r\n\r\n\t\t\t\t\t\t\treturn AxiosInstance(originalRequest);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.catch((err) => {\r\n\t\t\t\t\t\t\tconsole.log(err);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.log('Refresh token is expired', tokenParts.exp, now);\r\n\t\t\t\t\twindow.location.href = '/login/';\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log('Refresh token not available.');\r\n\t\t\t\twindow.location.href = '/login/';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// specific error handling done elsewhere\r\n\t\treturn Promise.reject(error);\r\n    }\r\n\r\n\r\n)\r\n\r\nexport default AxiosInstance;"]},"metadata":{},"sourceType":"module"}