{"ast":null,"code":"import axios from 'axios';\nconst AxiosInstance = axios.create({\n  baseURL: \"http://127.0.0.1:8000\",\n  timeout: 5000,\n  headers: {\n    Authorization: localStorage.getItem('access_token') ? 'Bearer ' + localStorage.getItem('access_token') : null,\n    'Content-Type': 'application/json',\n    accept: 'application/json'\n  }\n}); // AxiosInstance.interceptors.response.use(\n//     (response) => {\n//         return response;\n//     },\n//     async function (error){\n//         const originalRequest = error.config;\n//         if(typeof error.response == \"undefined\"){\n//             alert(\"A server/network error occurred.\");\n//             return Promise.reject(error);\n//         }\n//         if(error.response.status === 401 && originalRequest.url === 'http://127.0.0.1:8000/api/token/refresh/'){\n//             window.location.href = '/login/';\n//             return Promise.reject(error);\n//         }\n//         if (\n// \t\t\terror.response.data.code === 'token_not_valid' &&\n// \t\t\terror.response.status === 401 &&\n// \t\t\terror.response.statusText === 'Unauthorized'\n// \t\t) {\n// \t\t\tconst refreshToken = localStorage.getItem('refresh_token');\n// \t\t\tif (refreshToken) {\n// \t\t\t\tconst tokenParts = JSON.parse(atob(refreshToken.split('.')[1]));\n// \t\t\t\t// exp date in token is expressed in seconds, while now() returns milliseconds:\n// \t\t\t\tconst now = Math.ceil(Date.now() / 1000);\n// \t\t\t\tconsole.log(tokenParts.exp);\n// \t\t\t\tif (tokenParts.exp > now) {\n// \t\t\t\t\treturn AxiosInstance\n// \t\t\t\t\t\t.post('/token/refresh/', { refresh: refreshToken })\n// \t\t\t\t\t\t.then((response) => {\n// \t\t\t\t\t\t\tlocalStorage.setItem('access_token', response.data.access);\n// \t\t\t\t\t\t\tlocalStorage.setItem('refresh_token', response.data.refresh);\n// \t\t\t\t\t\t\tAxiosInstance.defaults.headers['Authorization'] =\n// \t\t\t\t\t\t\t\t'Bearer ' + response.data.access;\n// \t\t\t\t\t\t\toriginalRequest.headers['Authorization'] =\n// \t\t\t\t\t\t\t\t'Bearer ' + response.data.access;\n// \t\t\t\t\t\t\treturn AxiosInstance(originalRequest);\n// \t\t\t\t\t\t})\n// \t\t\t\t\t\t.catch((err) => {\n// \t\t\t\t\t\t\tconsole.log(err);\n// \t\t\t\t\t\t});\n// \t\t\t\t} else {\n// \t\t\t\t\tconsole.log('Refresh token is expired', tokenParts.exp, now);\n// \t\t\t\t\twindow.location.href = '/login/';\n// \t\t\t\t}\n// \t\t\t} else {\n// \t\t\t\tconsole.log('Refresh token not available.');\n// \t\t\t\twindow.location.href = '/login/';\n// \t\t\t}\n// \t\t}\n// \t\t// specific error handling done elsewhere\n// \t\treturn Promise.reject(error);\n//     }\n// )\n\nexport default AxiosInstance;","map":{"version":3,"sources":["C:/Users/butch/Documents/musegeeks/frontend/src/Axios.js"],"names":["axios","AxiosInstance","create","baseURL","timeout","headers","Authorization","localStorage","getItem","accept"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAN,CAAa;AAC/BC,EAAAA,OAAO,EAAE,uBADsB;AAE/BC,EAAAA,OAAO,EAAE,IAFsB;AAG/BC,EAAAA,OAAO,EAAE;AACLC,IAAAA,aAAa,EAAEC,YAAY,CAACC,OAAb,CAAqB,cAArB,IACb,YAAYD,YAAY,CAACC,OAAb,CAAqB,cAArB,CADC,GACsC,IAFhD;AAGL,oBAAgB,kBAHX;AAILC,IAAAA,MAAM,EAAE;AAJH;AAHsB,CAAb,CAAtB,C,CAWA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;;AAEA,eAAeR,aAAf","sourcesContent":["import axios from 'axios';\r\n\r\nconst AxiosInstance = axios.create({\r\n    baseURL: \"http://127.0.0.1:8000\",\r\n    timeout: 5000,\r\n    headers: {\r\n        Authorization: localStorage.getItem('access_token') \r\n        ? 'Bearer ' + localStorage.getItem('access_token') : null,\r\n        'Content-Type': 'application/json',\r\n        accept: 'application/json',\r\n    },\r\n})\r\n\r\n// AxiosInstance.interceptors.response.use(\r\n//     (response) => {\r\n//         return response;\r\n//     },\r\n\r\n//     async function (error){\r\n//         const originalRequest = error.config;\r\n\r\n//         if(typeof error.response == \"undefined\"){\r\n//             alert(\"A server/network error occurred.\");\r\n//             return Promise.reject(error);\r\n//         }\r\n\r\n//         if(error.response.status === 401 && originalRequest.url === 'http://127.0.0.1:8000/api/token/refresh/'){\r\n//             window.location.href = '/login/';\r\n//             return Promise.reject(error);\r\n//         }\r\n\r\n\r\n//         if (\r\n// \t\t\terror.response.data.code === 'token_not_valid' &&\r\n// \t\t\terror.response.status === 401 &&\r\n// \t\t\terror.response.statusText === 'Unauthorized'\r\n// \t\t) {\r\n// \t\t\tconst refreshToken = localStorage.getItem('refresh_token');\r\n\r\n// \t\t\tif (refreshToken) {\r\n// \t\t\t\tconst tokenParts = JSON.parse(atob(refreshToken.split('.')[1]));\r\n\r\n// \t\t\t\t// exp date in token is expressed in seconds, while now() returns milliseconds:\r\n// \t\t\t\tconst now = Math.ceil(Date.now() / 1000);\r\n// \t\t\t\tconsole.log(tokenParts.exp);\r\n\r\n// \t\t\t\tif (tokenParts.exp > now) {\r\n// \t\t\t\t\treturn AxiosInstance\r\n// \t\t\t\t\t\t.post('/token/refresh/', { refresh: refreshToken })\r\n// \t\t\t\t\t\t.then((response) => {\r\n// \t\t\t\t\t\t\tlocalStorage.setItem('access_token', response.data.access);\r\n// \t\t\t\t\t\t\tlocalStorage.setItem('refresh_token', response.data.refresh);\r\n\r\n// \t\t\t\t\t\t\tAxiosInstance.defaults.headers['Authorization'] =\r\n// \t\t\t\t\t\t\t\t'Bearer ' + response.data.access;\r\n// \t\t\t\t\t\t\toriginalRequest.headers['Authorization'] =\r\n// \t\t\t\t\t\t\t\t'Bearer ' + response.data.access;\r\n\r\n// \t\t\t\t\t\t\treturn AxiosInstance(originalRequest);\r\n// \t\t\t\t\t\t})\r\n// \t\t\t\t\t\t.catch((err) => {\r\n// \t\t\t\t\t\t\tconsole.log(err);\r\n// \t\t\t\t\t\t});\r\n// \t\t\t\t} else {\r\n// \t\t\t\t\tconsole.log('Refresh token is expired', tokenParts.exp, now);\r\n// \t\t\t\t\twindow.location.href = '/login/';\r\n// \t\t\t\t}\r\n// \t\t\t} else {\r\n// \t\t\t\tconsole.log('Refresh token not available.');\r\n// \t\t\t\twindow.location.href = '/login/';\r\n// \t\t\t}\r\n// \t\t}\r\n\r\n// \t\t// specific error handling done elsewhere\r\n// \t\treturn Promise.reject(error);\r\n//     }\r\n\r\n\r\n// )\r\n\r\nexport default AxiosInstance;"]},"metadata":{},"sourceType":"module"}